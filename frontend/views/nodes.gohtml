<div class="text-xs sm:text-base ">
    <div class="mt-2 grid grid-cols-2 gap-3 p-3 drop-shadow-sm lg:grid-cols-3">
        <div>
            <label for="Name" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Name:</label>
            <input
                id="Name"
                name="Name"
                autocomplete="off"
                form="nodesForm"
                class="w-full rounded-md border border-neutral-300 px-2 py-1"
                placeholder="Filter"
                type="text" />
        </div>
        <div>
            <label for="Provision" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Provision:</label>
            <select
                class="w-full rounded-md border border-neutral-300 bg-white px-2 py-1"
                name="Provision"
                id="Provision"
                form="nodesForm">
                <option value="" class="italic">None</option>
                <option value="true">true</option>
                <option value="false">false</option>
            </select>
        </div>
        <div>
            <label for="Firmware" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Firmware:</label>
            <input
                id="Firmware"
                name="Firmware"
                autocomplete="off"
                form="nodesForm"
                class="w-full rounded-md border border-neutral-300 px-2 py-1"
                placeholder="Filter"
                type="text" />
        </div>
        <div>
            <label for="BootImage" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Boot Image:</label>
            <input
                id="BootImage"
                name="BootImage"
                autocomplete="off"
                form="nodesForm"
                class="w-full rounded-md border border-neutral-300 px-2 py-1"
                placeholder="Filter"
                type="text" />
        </div>
        <div>
            <label for="Tags" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Tags:</label>
            <input
                id="Tags"
                name="Tags"
                autocomplete="off"
                form="nodesForm"
                class="w-full rounded-md border border-neutral-300 px-2 py-1"
                placeholder="Filter"
                type="text" />
        </div>
        <div>
            <label for="PageSize" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Page Size:</label>
            <select
                class="w-full rounded-md border border-neutral-300 bg-white px-2 py-1"
                name="PageSize"
                id="PageSize"
                form="nodesForm"
                onchange="htmx.trigger('body', 'refresh')">
                <option value="10">10</option>
                <option value="25" selected>25</option>
                <option value="100">100</option>
                <option value="200">200</option>
                <option value="1000">1000</option>
            </select>
        </div>
    </div>
    <div class="mb-3 flex justify-center gap-2">
        <button
            class="transform rounded-lg border bg-blue-500 px-2 py-1 text-white transition-transform hover:bg-blue-400 active:scale-90"
            type="button"
            hx-put="/fragments/actions"
            hx-target="#hostModal"
            hx-vals="js:{hosts: HostMap()}"
            hx-swap="innerHTML transition:true"
            onclick="showModal()">
            Actions
        </button>
        <button
            class="transform rounded-lg border bg-amber-500 px-2 py-1 text-white transition-transform hover:bg-amber-400 active:scale-90"
            type="button"
            hx-delete="/api/host"
            hx-vals="js:{hosts: HostMap()}"
            hx-swap="none"
            hx-confirm="Are you sure you want to delete the selected hosts?">
            Delete Hosts
        </button>
        <button
            class="transform rounded-lg border bg-blue-500 px-2 py-1 text-white transition-transform hover:bg-blue-400 active:scale-90"
            type="button"
            onclick="SelectAllNodes()">
            Select Page
        </button>
        <button
            class="transform rounded-lg border bg-neutral-500 px-2 py-1 text-white transition-transform hover:bg-neutral-400 active:scale-90"
            type="button"
            onclick="onNodesFormClear()">
            Clear Filters
        </button>
    </div>
    <dialog id="hostModal" class="h-5/6 w-full rounded-lg shadow-md md:w-2/3 lg:w-3/4"></dialog>

    <form
        class="overflow-x-scroll"
        id="nodesForm"
        hx-get="/fragments/nodes"
        hx-swap="innerHTML transition:true"
        hx-trigger="load, refresh from:body, keyup changed from:input delay:100ms, change changed from:#Provision"
        hx-on::before-request="onNodesFormSubmit()"
        hx-on::after-swap="shiftSelect()"></form>

    <script>
        (function () {
            document.getElementById("Name").value = localStorage.getItem("NodesFormName");
            document.getElementById("Provision").value = localStorage.getItem("NodesFormProvision");
            document.getElementById("Firmware").value = localStorage.getItem("NodesFormFirmware");
            document.getElementById("BootImage").value = localStorage.getItem("NodesFormBootImage");
            document.getElementById("Tags").value = localStorage.getItem("NodesFormTags");
        })();

        function onNodesFormSubmit() {
            localStorage.setItem("NodesFormName", document.getElementById("Name").value);
            localStorage.setItem("NodesFormProvision", document.getElementById("Provision").value);
            localStorage.setItem("NodesFormFirmware", document.getElementById("Firmware").value);
            localStorage.setItem("NodesFormBootImage", document.getElementById("BootImage").value);
            localStorage.setItem("NodesFormTags", document.getElementById("Tags").value);
        }
        function onNodesFormClear() {
            document.getElementById("nodesForm").reset();
            localStorage.removeItem("NodesFormName");
            localStorage.removeItem("NodesFormProvision");
            localStorage.removeItem("NodesFormFirmware");
            localStorage.removeItem("NodesFormBootImage");
            localStorage.removeItem("NodesFormTags");
            htmx.trigger("body", "refresh");
        }
        function shiftSelect() {
            let lastChecked = null;
            checkboxes = Array.from(document.querySelectorAll('input[type="checkbox"]'));
            checkboxes.forEach((val) => {
                val.addEventListener("click", function (e) {
                    if (lastChecked !== null && e.shiftKey) {
                        let start = checkboxes.indexOf(lastChecked);
                        let end = checkboxes.indexOf(this);

                        // reverse in case of selecting from bottom to top
                        let first = start < end ? start : end;
                        let last = start < end ? end : start;

                        for (let i = first; i <= last; i++) {
                            checkboxes[i].checked = this.checked;
                        }
                    }
                    lastChecked = this;
                });
            });
        }

        function HostMap() {
            let h = [];

            if (document.getElementById("CheckAll").checked) {
                return document.getElementById("AllHosts").value;
            }

            let c = document.querySelectorAll('input[type="checkbox"]').forEach((val) => {
                if (val.checked === true) {
                    h.push(val.name);
                }
            });

            return h.join(",");
        }
        function SelectAllNodes() {
            let container = document.querySelector("#nodesForm");
            let c = container.querySelectorAll('input[type="checkbox"]').forEach((val) => {
                if (val.id != "CheckAll") val.checked = true;
            });
        }

        function Clear() {
            let container = document.querySelector("#nodesForm");
            let c = container.querySelectorAll('input[type="checkbox"]').forEach((val) => {
                val.checked = false;
            });
        }
        document.body.addEventListener("closeModal", function (evt) {
            closeModal();
        });
        function showModal() {
            useTransition(() => document.getElementById("hostModal").showModal());
        }
        function closeModal() {
            useTransition(() => document.getElementById("hostModal").close());
            useTransition(() => (document.getElementById("hostModal").innerHTML = ""));
        }
        function checkAll(e) {
            e.target.checked ? SelectAllNodes() : Clear();
        }
    </script>
</div>

<div class="flex h-full flex-col">
    <div>
        <h1 class="py-4 text-2xl">Add Host</h1>
        <form hx-post="/api/host/add2" hx-swap="none" id="newHostForm">
            <div class="grid grid-cols-2 gap-3 p-3">
                <div>
                    <label for="Name" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Name:</label>
                    <input
                        id="Name"
                        name="Name"
                        class="w-full rounded-md border border-neutral-300 px-2 py-1"
                        placeholder="cpn-d06-03"
                        type="text" />
                </div>
                <div>
                    <label for="Provision" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Provision:</label>
                    <select
                        class="w-full rounded-md border border-neutral-300 bg-white px-2 py-1"
                        name="Provision"
                        id="Provision">
                        <option value="true">true</option>
                        <option value="false">false</option>
                    </select>
                </div>
                <div>
                    <label for="Firmware" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Firmware:</label>
                    <select
                        class="w-full rounded-md border border-neutral-300 bg-white px-2 py-1"
                        name="Firmware"
                        id="Firmware">
                        <option value="" class="italic">None</option>
                        {{ range .Firmware }}
                            <option value="{{ . }}">{{ . }}</option>
                        {{ end }}
                    </select>
                </div>
                <div>
                    <label for="BootImage" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Boot Image:</label>
                    <select
                        class="w-full rounded-md border border-neutral-300 bg-white px-2 py-1"
                        name="BootImage"
                        id="BootImage">
                        <option value="" class="italic">None</option>
                        {{ range .BootImage }}
                            <option value="{{ . }}">{{ . }}</option>
                        {{ end }}
                    </select>
                </div>
                <div>
                    <label for="Tags" class="absolute ml-3 -translate-y-[9px] bg-white text-xs">Tags:</label>
                    <input
                        id="Tags"
                        name="Tags"
                        class="w-full rounded-md border border-neutral-300 px-2 py-1"
                        placeholder="d06,compute"
                        type="text" />
                </div>
                <div class="flex justify-center gap-3 align-middle">
                    <button
                        class="rounded-md bg-blue-500 px-2 py-1 text-white hover:bg-blue-400"
                        type="button"
                        hx-get="/fragments/floorplan/interfaces"
                        hx-target="#interfaces"
                        hx-swap="beforeend transition:true"
                        hx-vals="js:{ID: ifaceID()}">
                        Add Interface
                    </button>
                    <button
                        class="rounded-md bg-blue-500 px-2 py-1 text-white enabled:hover:bg-blue-400 disabled:opacity-75"
                        type="button"
                        onclick="undoRemoveIface()"
                        id="undoBtn"
                        disabled>
                        Undo
                    </button>
                </div>
                <input type="hidden" value="0" id="ifaceID" />
                <div class="col-span-2" id="interfaces"></div>
                <div class="col-span-2 hidden" id="deletedInterfaces"></div>
            </div>
        </form>
    </div>
    <div class="flex-grow"></div>
    <div class="sticky bottom-0 flex w-full justify-end gap-3 border-t border-neutral-200 bg-neutral-50 p-3">
        <button
            type="submit"
            form="newHostForm"
            class="rounded-md border bg-blue-500 px-2 py-1 text-white hover:bg-blue-400">
            Submit
        </button>
        <button
            type="button"
            onclick="useTransition(() => document.getElementById('addRack').close());"
            class="rounded-md border bg-neutral-500 px-2 py-1 text-white hover:bg-neutral-400">
            Close
        </button>
    </div>
</div>
<script>
    function ifaceID() {
        let id = document.getElementById("ifaceID").value;
        document.getElementById("ifaceID").value++;
        return id;
    }
    function removeIface(id) {
        let iface = document.getElementById(`interface[${id}]`);
        let deleted = document.getElementById("deletedInterfaces");
        useTransition(() => deleted.appendChild(iface));

        document.getElementById("undoBtn").disabled = false;
    }
    function undoRemoveIface() {
        let iface = document.getElementById("deletedInterfaces").lastChild;
        let interfaceParent = document.getElementById("interfaces");
        if (document.getElementById("deletedInterfaces").childElementCount <= 1) {
            document.getElementById("undoBtn").disabled = true;
        }

        prevId = parseInt(iface.id.substring(10, iface.id.length - 1));
        useTransition(() => interfaceParent.insertBefore(iface, document.getElementById(`interface[${prevId + 1}]`)));
    }
    // Problems: ID's in functions are not updated (deleting & moving doesn't work after first move), Drag and Drop??
    function moveIface(direction, id) {
        let newID = direction === "up" ? id-- : id++;
        changeIDs(newID, -1);
        changeIDs(id, newID);
        changeIDs(-1, id);

        function changeIDs(prevID, newID) {
            let root = document.getElementById(`interface[${prevID}]`).getElementsByClassName("changeme");
            for (let i = 0; i < root.length; i++) {
                let element = root[i];
                if (element.tagName == "LABEL") {
                    element.htmlFor = element.htmlFor.replace(/\[(-?\d+)\]/, `[${newID}]`);
                } else if (element.tagName == "H1") {
                    element.innerText = element.innerText.replace(/(-?\d+)/, newID);
                } else {
                    element.name = element.name.replace(/\[(-?\d+)\]/, `[${newID}]`);
                    element.id = element.id.replace(/\[(-?\d+)\]/, `[${newID}]`);
                }
            }
            document.getElementById(`interface[${prevID}]`).id = `interface[${newID}]`;
        }
        sortIfaces();
    }
    function sortIfaces() {
        let ifaces = document.getElementById("interfaces");
        let children = Array.from(ifaces.children);
        children.sort((a, b) => {
            let aID = parseInt(a.id.substring(10, a.id.length - 1));
            let bID = parseInt(b.id.substring(10, b.id.length - 1));
            return aID - bID;
        });
        for (let i = 0; i < children.length; i++) {
            ifaces.appendChild(children[i]);
        }
    }
    function getCurrentID(e, i) {
        let parent = e;
        for (let j = 0; j < i; j++) {
            parent = parent.parentNode;
        }
        return parseInt(parent.id.match(/(-?\d+)/)[0]);
    }
</script>

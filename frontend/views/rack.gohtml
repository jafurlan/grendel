<form>
    <div class="mb-3 flex justify-center gap-2">
        <button
            class="rounded-lg border bg-blue-500 px-2 py-1 text-white hover:bg-blue-400"
            type="button"
            hx-get="/fragments/rack/{{ .Rack }}/actions"
            hx-target="#hostModal"
            hx-swap="innerHTML transition:true"
            onclick="showModal()">
            Actions
        </button>
        <button
            class="rounded-lg border bg-blue-500 px-2 py-1 text-white hover:bg-blue-400"
            type="button"
            hx-get="/fragments/rack/{{ .Rack }}/add/modal"
            hx-target="#hostModal"
            hx-swap="innerHTML transition:true"
            hx-vals="js:{hosts: HostMap('u')}"
            onclick="showModal()">
            Add Hosts
        </button>
        <button
            class="rounded-lg border bg-amber-500 px-2 py-1 text-white hover:bg-amber-400"
            type="button"
            hx-delete="/api/host"
            hx-vals='js:{hosts: HostMap("hostname")}'
            hx-swap="none"
            hx-confirm="Are you sure you want to delete the selected hosts?">
            Delete Hosts
        </button>
        <button
            class="rounded-lg border bg-blue-500 px-2 py-1 text-white hover:bg-blue-400"
            type="button"
            onclick="SelectAllNodes()">
            Select Nodes
        </button>
        <button
            class="rounded-lg border bg-neutral-500 px-2 py-1 text-white hover:bg-neutral-400"
            type="button"
            onclick="Clear()">
            Clear
        </button>
    </div>

    <div hx-get="/fragments/rack/{{ .Rack }}/table" hx-swap="innerHTML" hx-trigger="load, refresh from:body"></div>
</form>

<dialog id="hostModal" class="h-5/6 w-full rounded-lg shadow-md md:w-2/3 lg:w-3/4"></dialog>

<script>
    function showModal() {
        useTransition(() => document.getElementById("hostModal").showModal());
    }
    function closeModal() {
        useTransition(() => document.getElementById("hostModal").close());
        useTransition(() => (document.getElementById("hostModal").innerHTML = ""));
    }
    function SelectAllNodes() {
        var c = document.querySelectorAll('input[type="checkbox"]').forEach((val) => {
            var n = val.name.split(":");
            if (n[2] === "server") val.checked = true;
        });
    }

    function Clear() {
        var c = document.querySelectorAll('input[type="checkbox"]').forEach((val) => {
            val.checked = false;
        });
    }

    function HostMap(type = "hostname") {
        var h = [];
        var c = document.querySelectorAll('input[type="checkbox"]').forEach((val) => {
            if (val.checked === true) {
                var n = val.name.split(":");
                if (type === "hostname" && n[1] !== "") h.push(n[1]);
                else if (type === "u") h.push(n[0]);
            }
        });
        return h.join(",");
    }

    document.body.addEventListener("closeModal", function (evt) {
        closeModal();
    });

    function parseTable() {
        if (document.getElementById("hostTableBody") == null) return "";

        let table = document.getElementById("hostTableBody").children;
        let ifaceCount = document.getElementById("hostTableFirstRow").children.length - 1; //exclude first col
        let hosts = [];

        for (let i = 0; i < table.length; i++) {
            let Name = table[i].querySelector("input[name=Name]").value;
            let Ports = Array.from(table[i].querySelectorAll("input[name=Port]")).map((p) => p.value);
            let MACs = Array.from(table[i].querySelectorAll("input[name=MAC]")).map((m) => m.value);
            let IPs = Array.from(table[i].querySelectorAll("input[name=IP]")).map((ip) => ip.value);

            let hostIfaces = [];
            for (let i = 0; i < ifaceCount; i++) {
                hostIfaces.push({
                    Port: Ports[i],
                    MAC: MACs[i],
                    IP: IPs[i],
                });
            }

            hosts.push({
                Name: Name,
                Interfaces: hostIfaces,
            });
        }

        let interfaces = [];
        let footer = document.getElementById("hostTableFooter").children[0];

        let Domain = Array.from(footer.querySelectorAll("input[name=Domain]")).map((d) => d.value);
        let Name = Array.from(footer.querySelectorAll("input[name=Name]")).map((n) => n.value);
        let BMC = Array.from(footer.querySelectorAll("select[name=BMC]")).map((b) => b.value);
        let VLAN = Array.from(footer.querySelectorAll("input[name=VLAN]")).map((v) => v.value);
        let MTU = Array.from(footer.querySelectorAll("input[name=MTU]")).map((m) => m.value);
        for (let i = 0; i < ifaceCount; i++) {
            interfaces.push({
                Domain: Domain[i],
                Name: Name[i],
                BMC: BMC[i],
                VLAN: VLAN[i],
                MTU: MTU[i],
            });
        }
        return JSON.stringify({ Hosts: hosts, Interfaces: interfaces });
    }
    function removeIface(index) {
        let ifaceEls = Array.from(document.getElementsByClassName(`interface-${index}`));
        ifaceEls.forEach((el) => useTransition(() => el.remove()));
        document.getElementById("ifaceCount").value--;
    }
</script>

<div class="flex justify-center">
    <div class="mb-4 flex justify-center gap-2 rounded-xl border border-neutral-300 p-2 text-center shadow-lg">
        <h1 class="px-2 text-3xl">{{ .HostName }}</h1>
    </div>
</div>
<div
    hx-get="/fragments/host/{{ .HostName }}/form"
    hx-trigger="load, refresh from:body"
    hx-swap="innerHTML transition:true"></div>
<script>
    function ifaceID() {
        let id = document.getElementById("ifaceID").value;
        document.getElementById("ifaceID").value++;
        return id;
    }
    function removeIface(id) {
        let iface = document.getElementById(`interface:${id}`);
        useTransition(() => iface.remove());
    }
    function moveUp(id) {
        let ifaces = document.getElementById("interfaces").children;
        for (let i = 0; i < ifaces.length; i++) {
            if (ifaces[i].id == `interface:${id}`) {
                useTransition(() => ifaces[i].parentNode.insertBefore(ifaces[i], ifaces[i - 1]));
                return;
            }
        }
    }
    function moveDown(id) {
        let ifaces = document.getElementById("interfaces").children;
        for (let i = 0; i < ifaces.length; i++) {
            if (ifaces[i].id == `interface:${id}`) {
                if (i + 2 <= ifaces.length) {
                    useTransition(() => ifaces[i].parentNode.insertBefore(ifaces[i], ifaces[i + 2]));
                    return;
                } else if (i + 1 == ifaces.length) {
                    useTransition(() => ifaces[i].parentNode.insertBefore(ifaces[i], ifaces[0]));
                    return;
                } else {
                    useTransition(() => ifaces[i].parentNode.append(ifaces[i]));
                    return;
                }
            }
        }
    }
    function parseForm() {
        let ifaces = document.getElementById("interfaces").children;
        let interfaces = [];
        for (let i = 0; i < ifaces.length; i++) {
            let iface = {};
            iface.Fqdn = ifaces[i].querySelector("input[name='Fqdn']").value;
            iface.Mac = ifaces[i].querySelector("input[name='Mac']").value;
            iface.Ip = ifaces[i].querySelector("input[name='Ip']").value;
            iface.Ifname = ifaces[i].querySelector("input[name='Ifname']").value;
            iface.Bmc = ifaces[i].querySelector("select[name='Bmc']").value;
            iface.Vlan = ifaces[i].querySelector("input[name='Vlan']").value;
            iface.Mtu = ifaces[i].querySelector("input[name='Mtu']").value;
            interfaces.push(iface);
        }
        return JSON.stringify(interfaces);
    }
</script>

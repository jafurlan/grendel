// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const userCount = `-- name: UserCount :one
/*
 * SPDX-FileCopyrightText: (C) 2019 Grendel Authors
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

select count(*) from user
`

func (q *Queries) UserCount(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, userCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userCreate = `-- name: UserCreate :one
insert into user (username, password_hash, role) 
values (?1, ?2, ?3)
on conflict (username)
do update set password_hash = ?2, role = ?3
returning id, username, role, password_hash, enabled, created_at, updated_at
`

type UserCreateParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

func (q *Queries) UserCreate(ctx context.Context, db DBTX, arg UserCreateParams) (User, error) {
	row := db.QueryRowContext(ctx, userCreate, arg.Username, arg.PasswordHash, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.PasswordHash,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userDelete = `-- name: UserDelete :exec
delete from user where username = ?1
`

func (q *Queries) UserDelete(ctx context.Context, db DBTX, username string) error {
	_, err := db.ExecContext(ctx, userDelete, username)
	return err
}

const userFetch = `-- name: UserFetch :one
select id, username, role, password_hash, enabled, created_at, updated_at from user where username = ?1
`

func (q *Queries) UserFetch(ctx context.Context, db DBTX, username string) (User, error) {
	row := db.QueryRowContext(ctx, userFetch, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.PasswordHash,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userList = `-- name: UserList :many
select id, username, role, password_hash, enabled, created_at, updated_at from user
`

func (q *Queries) UserList(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.QueryContext(ctx, userList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Role,
			&i.PasswordHash,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userUpdate = `-- name: UserUpdate :exec
update user set role = ?1 where username = ?2
returning id, username, role, password_hash, enabled, created_at, updated_at
`

type UserUpdateParams struct {
	Role     string `json:"role"`
	Username string `json:"username"`
}

func (q *Queries) UserUpdate(ctx context.Context, db DBTX, arg UserUpdateParams) error {
	_, err := db.ExecContext(ctx, userUpdate, arg.Role, arg.Username)
	return err
}
